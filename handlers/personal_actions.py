from aiogram import types, Dispatcher

import re
import requests
from bot import BotDB
from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
from config import adminpass
from dispatcher import dp, bot
import keyboards
import searching
from pathlib import Path
from aiogram.types import ContentType, File, Message
from vosk import Model, KaldiRecognizer
import sys
import json
import os
import time
import wave


class FMSAdmin(StatesGroup):
    temppass = State()
    connectionpass = State()
    find_anket = State()
    add_comment = State()


#
#
# #
# async def handle_file(file: File, file_name: str, path: str):
#     Path(f"{path}").mkdir(parents=True, exist_ok=True)
#
#     await bot.download_file(file_path=file.file_path, destination=f"{path}/{file_name}")
#


# @dp.message_handler(content_types=[ContentType.VOICE])
# async def voice_message_handler(message: Message):
#     print("aaa")
#     model = Model(r"vosk-model-small-ru-0.22")
#
#     wf = wave.open(r'C:\Users\–Ø–Ω–∞\PycharmProjects\wildhackbot\232.wav', "rb")
#     rec = KaldiRecognizer(model, 16000)
#
#     result = ''
#     last_n = False
#
#     while True:
#         data = wf.readframes(16000)
#         if len(data) == 0:
#             break
#
#         if rec.AcceptWaveform(data):
#             res = json.loads(rec.Result())
#
#             if res['text'] != '':
#                 result += f" {res['text']}"
#                 last_n = False
#             elif not last_n:
#                 result += '\n'
#                 last_n = True
#
#     res = json.loads(rec.FinalResult())
#     result += f" {res['text']}"
#
#     print(result)


#
#
#

@dp.message_handler(commands="admin", state=None)
async def iwanttobeadmin(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–¥–º–∏–Ω–∞:")
    await FMSAdmin.temppass.set()


@dp.message_handler(state=FMSAdmin.temppass)
async def checkadmin(message: types.Message, state: FSMContext):
    if message.text == adminpass:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω {message.from_user.first_name}")
        # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # buttons = ["–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", "–í—Å–µ –∞–Ω–∫–µ—Ç—ã", "–ù–∞–∑–∞–¥"]
        # keyboard.add(*buttons)
        await message.answer((f"*–ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ—Å–∞*"), reply_markup=keyboards.keyboardadmin())
        await FMSAdmin.next()


@dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", state=FMSAdmin.connectionpass)
async def list(message: types.Message):
    ans = ""
    db = BotDB.get_bd()
    k = 1
    for person in db:
        if person[3] is not None and (person[-1] == None or person[-1] == "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"):
            ans += f"{str(k)}. {person[3]} \n"
            k += 1
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "–ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    await message.answer(ans)
    await message.answer("–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –ø–æ –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–í—Å–µ –∞–Ω–∫–µ—Ç—ã", state=FMSAdmin.connectionpass)
async def list(message: types.Message, state=FSMContext):
    await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:")
    result = BotDB.get_bd()
    ans = ""
    k = 1
    for person in result:
        if person[3] is not None:
            ans += f"{str(k)} {person[3]} \n"
            k += 1
    await message.answer(ans)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", "–ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    await message.answer("–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –ø–æ –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö?", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥", state=FMSAdmin.connectionpass)
async def back(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboards.keyboardadmin())


@dp.message_handler(lambda message: message.text == "–ù–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—É", state=FMSAdmin.connectionpass)
async def list(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –§–ò–û", reply_markup=types.ReplyKeyboardRemove())
    await FMSAdmin.next()


@dp.message_handler(state=FMSAdmin.find_anket)
async def finding(message: types.Message, state: FSMContext):
    answ = ""
    columns = ["id", "user_id", "join_date", "full_name", "date_of_application", "mail", "birthday", "phone_number",
               "education",
               "territory", "arrival_date", "departure_date", "lang", "experience", "skills", "recommendations",
               "volunteer_book", "pitch", "video", "reviewed"]
    db = BotDB.get_bd()
    for row in db:
        if row[3] == message.text:
            await state.update_data(finded=row[1])
            for i in range(len(row)):
                answ += columns[i] + ": " + str(row[i]) + "\n"
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    if answ == "":
        answ = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        keyboard = keyboards.keyboardadmin()
    await message.answer(answ, reply_markup=keyboard)
    await FMSAdmin.connectionpass.set()


@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", state=FMSAdmin.connectionpass)
async def list(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    await FMSAdmin.next()
    await FMSAdmin.next()


@dp.message_handler(state=FMSAdmin.add_comment)
async def list(message: types.Message, state: FSMContext):
    data = await state.get_data()
    BotDB.add_information(data.get("finded"), "reviewed", message.text)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=keyboards.keyboardadmin())
    await FMSAdmin.connectionpass.set()


@dp.message_handler(lambda message: message.text == "–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", state=FMSAdmin.connectionpass)
async def list(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await state.finish()
    await start(message)


# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@dp.message_handler(commands="start")
async def start(message: types.Message):
    me = await bot.get_me()

    if not BotDB.user_exists(message.from_user.id):
        BotDB.add_user(message.from_user.id)

    await message.bot.send_message(message.from_user.id,
                                   (
                                       f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} üëã –Ø {me.first_name} –ø–æ–º–æ–≥—É"
                                       f"–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å?"),
                                   reply_markup=keyboards.keyboarduser())


@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏")
async def without_puree(message: types.Message):
    await message.answer(str(BotDB.get_status(message.from_user.id))[3:-4])


@dp.message_handler(lambda message: message.text == "FAQ")
async def without_puree(message: types.Message):
    await message.answer(f"{message.from_user.first_name}, –ø–æ–∑–≤–æ–ª—å—Ç–µ –±—ã—Å—Ç—Ä–æ –≤–≤–µ—Å—Ç–∏ –í–∞—Å –≤ –∫—É—Ä—Å –¥–µ–ª–∞ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è —É–º–µ—é üêª\n\n–Ø - –ö—Ä–æ–Ω–æ—Ü–∫–∏–π–ë–æ—Ç, –ø—Ä—è–º–æ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–≤–æ–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —è –æ—á–µ–Ω—å-–æ—á–µ–Ω—å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")


@dp.message_handler(lambda message: message.text == "–û –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–µ")
async def without_puree(message: types.Message):
    await message.answer("""–ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–æ–≤–µ–¥–Ω—ã–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–º—á–∞—Ç–∫–∏ –∏ –ø—Ä–æ–±—É–∂–¥–∞–µ–º –ª—é–±–æ–≤—å –∫ –ø—Ä–∏—Ä–æ–¥–µ üå±‚ù§Ô∏è

–ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ‚Äì –≤—ã—Å–æ–∫–æ–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º –ø—Ä–∏—Ä–æ–¥–æ–æ—Ö—Ä–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –≤–≤–µ—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–º –ø—Ä–∏—Ä–æ–¥–æ–æ—Ö—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç–∫–æ–ª–æ–≥–∏–µ–π, –ø—Ä–∏—Ä–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–¥–∫–∏—Ö –∏ –ø—Ä–æ–º—ã—Å–ª–æ–≤—ã—Ö –≤–∏–¥–æ–≤, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ –≤ —Å—Ñ–µ—Ä–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ–º –ø–æ–¥—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.

–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –≤—Å–µ–º –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞ - www.kronoki.ru""")


# @dp.message_handler(state=None)
# async def without_puree(message: types.Message):
#     question = message.text
#     if question != "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É":
#         result = searching.theBotMind(question)
#         await message.answer(result)


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã

class FSMAnket(StatesGroup):
    full_name = State()
    mail = State()
    birthday = State()
    phone_number = State()
    education = State()
    territory = State()
    arrival_date = State()
    departure_date = State()
    lang = State()
    experience = State()
    skills = State()
    recommendations = State()
    volunteer_book = State()
    pitch = State()
    video = State()
    check = State()
    checkmain = State()


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@dp.message_handler(lambda message: message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", state=None)
async def cm_start(message: types.Message):
    await FSMAnket.full_name.set()
    await message.answer("–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û üë§", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=None)
async def without_puree(message: types.Message):
    question = message.text
    if question != "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É":
        result = searching.theBotMind(question)
        await message.answer(result)
        if result == """–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–±–æ—Ä–∞ –í–∞—à–µ–π –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã, –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –≥—Ä–∞—Ñ–∏–∫, —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º –û–û–ü–¢ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –≥—Ä—É–ø–ø –Ω–∞ –¥–∞–Ω–Ω—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –¥—Ä—É–≥–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.
–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º –Ω–∞–±–æ—Ä–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ www.kronoki.ru, –ª–∏–±–æ –ø–æ —Å—Å—ã–ª–∫–µ https://kronoki.ru/ru/volunteerism/programs/
–ü—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç –Ω–∞—Å –ø–∏—Å—å–º–æ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏:
–¥–æ–≥–æ–≤–æ—Ä –æ –¥–æ–±—Ä–æ–≤–æ–ª—å—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:
1. —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏–µ–º
2. —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏.""":
            await message.answer("–ù–∏–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–≥–æ–≤–æ—Ä –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            await dp.bot.send_document(message.from_user.id,
                                       "BQACAgIAAxkBAAILT2Gsc_kWe6Gisvc4ZRswOCQniqOCAAJbEQACRWVpSaagd7quCfD8IgQ")


# @dp.message_handler(content_types=types.ContentType.DOCUMENT, state=None)
# async def send_order_finish(message: types.Message, state: FSMContext):
#     msg_document = message.document.file_id
#     print("auf")
#     # await dp.bot.send_document(775430746, msg_document)
#     print(msg_document)
#     await state.reset_state()

# –ì—Ä—É–∑–∏–º –§–ò–û
@dp.message_handler(state=FSMAnket.full_name)
async def load_fio(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "full_name", message.text)
    await FSMAnket.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É üì¨")


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç - –ø–æ—á—Ç—É
@dp.message_handler(state=FSMAnket.mail)
async def load_mail(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "mail", message.text)
    await FSMAnket.next()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è üìÖ", reply_markup=types.ReplyKeyboardRemove())


# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=FSMAnket.birthday)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "birthday", message.text)
    await FSMAnket.next()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±")


# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FSMAnket.phone_number)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "phone_number", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫–æ–µ —É –í–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ? üéì")


# –ö–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É —é–∑–µ—Ä–∞
@dp.message_handler(state=FSMAnket.education)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "education", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û–∑–µ—Ä–Ω—ã–π", "–¢—Ä–∞–≤—è–Ω–æ–π", "–£–∑–æ–Ω", "–î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤", "–ò—Å—Ç–æ–∫ –∏ –ê—ç—Ä–æ–¥—Ä–æ–º", "–ö—Ä–æ–Ω–æ–∫–∏ –∏ –°–µ–º—è—á–∏–∫"]
    keyboard.add(*buttons)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö —Ä–∞–±–æ—Ç üèû \n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å "
        "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º–∏ –ö—Ä–æ–Ω–æ—Ü–∫–æ–≥–æ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞ –∏ –Æ–∂–Ω–æ-–ö–∞–º—á–∞—Ç—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–Ω–∏–∫–∞, —Å –∫–æ—Ä–¥–æ–Ω–∞–º–∏, —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞, "
        "—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º–∏ –Ω–∞ –Ω–∞—à–∏—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ www.kronoki.ru \n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–∞ "
        "—Å–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ ‚ûù –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö ", reply_markup=keyboard)


# –í—ã–±–æ—Ä –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞
@dp.message_handler(
    state=FSMAnket.territory)  # –°–Æ–î–ê –ü–û–¢–û–ú –í–ö–õ–ò–ù–ò–¢–¨ –ö–ù–û–ü–ê–ß–¨–ö–ò –° –í–´–ë–û–†–û–ú –ó–ê–ü–û–í–ï–î–ù–ò–ö–ê!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "territory", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ? üìÜ", reply_markup=types.ReplyKeyboardRemove())


# –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
@dp.message_handler(state=FSMAnket.arrival_date)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "arrival_date", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ? üìÜ")


# –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
@dp.message_handler(state=FSMAnket.departure_date)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "departure_date", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –≤–ª–∞–¥–µ–µ—Ç–µ? üåé")


# –ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –≤–ª–∞–¥–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.message_handler(state=FSMAnket.lang)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "lang", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer("–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö —Ä–∞–±–æ—Ç? üë•", reply_markup=keyboard)


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º
@dp.message_handler(state=FSMAnket.experience)  # –ö–ù–û–ü–ê–ß–¨–ö–ò –î–ê/–ù–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "experience", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ? üë®‚Äçüîß", reply_markup=types.ReplyKeyboardRemove())


# –ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤–ª–∞–¥–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.message_handler(state=FSMAnket.skills)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "skills", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏? üìÑ", reply_markup=keyboard)


# –ï—Å—Ç—å –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@dp.message_handler(state=FSMAnket.recommendations)  # –ö–ù–û–ü–ê–ß–¨–ö–ò –î–ê/–ù–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "recommendations", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer("–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –í–∞—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è –∫–Ω–∏–∂–∫–∞? üìñ", reply_markup=keyboard)


# –ï—Å—Ç—å –ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è –∫–Ω–∏–∂–∫–∞
@dp.message_handler(state=FSMAnket.volunteer_book)  # –ö–ù–û–ü–ê–ß–¨–ö–ò –î–ê/–ù–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "volunteer_book", message.text)
    await FSMAnket.next()
    await message.answer("–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –í—ã –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º? üåü \n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö",
                         reply_markup=types.ReplyKeyboardRemove())


# –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –í—ã
@dp.message_handler(state=FSMAnket.pitch)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "pitch", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
    keyboard.add(*buttons)
    await message.answer(
        "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–±–æ—Ä–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ –æ —Å–µ–±–µ, –ª–∏–±–æ —Å—Å—ã–ª–∫—É "
        "–Ω–∞ –Ω–µ–≥–æ üé¨ \n\n–≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ", reply_markup=keyboard)


# –í–∏–¥–µ–æ –æ —Å–µ–±–µ
@dp.message_handler(state=FSMAnket.video)  # –î–û–ë–ê–í–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ü–†–û–ü–£–°–ö–ê –î–ê–ù–ù–û–ì–û –®–ê–ì–ê!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "video", message.text)
    # await FSMAnket.next()
    await state.finish()
    # await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? üëÄ",
    #                      reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É üëÄ",
                         reply_markup=types.ReplyKeyboardRemove())
    await start(message)


# # –î–æ–±–∞–≤–∫–∞ –∫ –∞–Ω–∫–µ—Ç–µ
# @dp.message_handler(state=FSMAnket.check)
# async def load_birthday(message: types.Message, state: FSMContext):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–î–∞", "–ù–µ—Ç"]
#     keyboard.add(*buttons)
#     await state.finish()
#     await message.answer("*–æ–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç*",reply_markup=keyboard)
#
#
# @dp.message_handler(state=FSMAnket.checkmain)
# async def load_birthday(message: types.Message, state: FSMContext):
#     if message.text == "–î–∞":
#         await message.answer("–ï—Å–ª–∏ –≤—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'")
#     else:
#         pass
#     await state.finish()
#     await message.answer(
#         "–°–ø–∞—Å–∏–±–æ, –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
#         reply_markup=types.ReplyKeyboardRemove())
#     keyboards.keyboarduser()

