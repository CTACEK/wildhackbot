from aiogram import types, Dispatcher

import re
from bot import BotDB
from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
from config import adminpass
from dispatcher import dp
import keyboards

admin = ["–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", "–í—Å–µ –∞–Ω–∫–µ—Ç—ã", "–ù–∞–∑–∞–¥"]

class FMSAdmin(StatesGroup):
    temppass = State()
    connectionpass = State()


@dp.message_handler(commands="admin", state=None)
async def iwanttobeadmin(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–¥–º–∏–Ω–∞:")
    await FMSAdmin.temppass.set()


@dp.message_handler(state=FMSAdmin.temppass)
async def checkadmin(message: types.Message, state: FSMContext):
    if message.text == adminpass:
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω {message.from_user.first_name}")
        # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # buttons = ["–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", "–í—Å–µ –∞–Ω–∫–µ—Ç—ã", "–ù–∞–∑–∞–¥"]
        # keyboard.add(*buttons)
        await message.answer((f"*–ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ—Å–∞*"), reply_markup=keyboards.keyboardadmin())
        await FMSAdmin.next()


#
# @dp.message_handler(state=FMSAdmin.connectionpass)
# async def admin(message: types.Message, state: FSMContext):
#     print("z nen")
#     await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω {message.from_user.first_name}")
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", "–í—Å–µ –∞–Ω–∫–µ—Ç—ã"]
#     keyboard.add(*buttons)
#     await state.finish()

@dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", state=FMSAdmin.connectionpass)
async def list(message: types.Message):
    await message.answer("–ù–µ–æ—Ç–≤–µ—Ç")


@dp.message_handler(lambda message: message.text == "–í—Å–µ –∞–Ω–∫–µ—Ç—ã", state=FMSAdmin.connectionpass)
async def list(message: types.Message):
    global admin
    await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:")
    result = BotDB.get_bd()
    k = 1
    for person in result:
        if person[3] is not None:
            await message.answer(f"{str(k)} {person[3]}")
            k += 1

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?", "–ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    await message.answer((f"*–æ–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*"), reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?", state=FMSAdmin.connectionpass)
async def list(message: types.Message):
    global admin
    await message.answer("–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:")
    result = BotDB.get_bd()
    k = 1
    for person in result:
        if person[3] is not None:
            await message.answer(f"{str(k)} {person[3]}")
            k += 1

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–•–æ—Ç–∏—Ç–µ –∫–æ–≥–æ-—Ç–æ –Ω–∞–π—Ç–∏?", "–ù–∞–∑–∞–¥"]
    keyboard.add(*buttons)
    await message.answer((f"*–æ–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*"), reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥", state=FMSAdmin.connectionpass)
async def list(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ —é–∑–µ—Ä–∞")
    await state.finish()
    await start(message)


@dp.message_handler(commands="start")
async def start(message: types.Message):
    bot = Bot(token=config.BOT_TOKEN)
    me = await bot.get_me()

    if (not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id)

    await message.bot.send_message(message.from_user.id,
                                   (
                                       f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} üëã –Ø {me.first_name} –ø–æ–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å?"))


    await message.answer((f"*–æ–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*"), reply_markup=keyboards.keyboarduser())
    # await message.answer((f"–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ, {message.from_user.first_name}?"), reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "FAQ")
async def without_puree(message: types.Message):
    await message.answer("–§–∞–∫—å—é")


@dp.message_handler(lambda message: message.text == "–û –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–µ")
async def without_puree(message: types.Message):
    await message.answer("–ë–ª–∞ –±–ª–∞ –±–ª–∞")


# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã

class FSMAnket(StatesGroup):
    full_name = State()
    mail = State()
    birthday = State()
    phone_number = State()
    education = State()
    territory = State()
    arrival_date = State()
    departure_date = State()
    lang = State()
    experience = State()
    skills = State()
    recommendations = State()
    volunteer_book = State()
    pitch = State()
    video = State()


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@dp.message_handler(lambda message: message.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", state=None)
async def cm_start(message: types.Message):
    await FSMAnket.full_name.set()
    # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # buttons = ["–î–∞", "–ù–µ—Ç"]
    # keyboard.add(*buttons)
    await message.answer("–î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û üë§", reply_markup=types.ReplyKeyboardRemove())


# –ì—Ä—É–∑–∏–º –§–ò–û
@dp.message_handler(state=FSMAnket.full_name)
async def load_fio(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "full_name", message.text)
    await FSMAnket.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É üì¨")


# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç - –ø–æ—á—Ç—É
@dp.message_handler(state=FSMAnket.mail)
async def load_mail(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "mail", message.text)
    await FSMAnket.next()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è üìÖ", reply_markup=types.ReplyKeyboardRemove())


# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=FSMAnket.birthday)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "birthday", message.text)
    await FSMAnket.next()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±")


# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(state=FSMAnket.phone_number)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "phone_number", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫–æ–µ —É –í–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ? üéì")


# –ö–∞–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É —é–∑–µ—Ä–∞
@dp.message_handler(state=FSMAnket.education)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "education", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û–∑–µ—Ä–Ω—ã–π", "–¢—Ä–∞–≤—è–Ω–æ–π", "–£–∑–æ–Ω", "–î–æ–ª–∏–Ω–∞ –≥–µ–π–∑–µ—Ä–æ–≤", "–ò—Å—Ç–æ–∫ –∏ –ê—ç—Ä–æ–¥—Ä–æ–º", "–ö—Ä–æ–Ω–æ–∫–∏ –∏ –°–µ–º—è—á–∏–∫"]
    keyboard.add(*buttons)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö —Ä–∞–±–æ—Ç üèû \n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å "
        "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º–∏ –ö—Ä–æ–Ω–æ—Ü–∫–æ–≥–æ –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞ –∏ –Æ–∂–Ω–æ-–ö–∞–º—á–∞—Ç—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–Ω–∏–∫–∞, —Å –∫–æ—Ä–¥–æ–Ω–∞–º–∏, —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞, "
        "—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º–∏ –Ω–∞ –Ω–∞—à–∏—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ www.kronoki.ru \n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ù–∞ "
        "—Å–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ ‚ûù –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö ", reply_markup=keyboard)


# –í—ã–±–æ—Ä –∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞
@dp.message_handler(
    state=FSMAnket.territory)  # –°–Æ–î–ê –ü–û–¢–û–ú –í–ö–õ–ò–ù–ò–¢–¨ –ö–ù–û–ü–ê–ß–¨–ö–ò –° –í–´–ë–û–†–û–ú –ó–ê–ü–û–í–ï–î–ù–ò–ö–ê!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "territory", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫—É—é –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ? üìÜ", reply_markup=types.ReplyKeyboardRemove())


# –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
@dp.message_handler(state=FSMAnket.arrival_date)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "arrival_date", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ? üìÜ")


# –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
@dp.message_handler(state=FSMAnket.departure_date)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "departure_date", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –≤–ª–∞–¥–µ–µ—Ç–µ? üåé")


# –ö–∞–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –≤–ª–∞–¥–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.message_handler(state=FSMAnket.lang)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "lang", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer("–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö —Ä–∞–±–æ—Ç? üë•", reply_markup=keyboard)


# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º
@dp.message_handler(state=FSMAnket.experience)  # –ö–ù–û–ü–ê–ß–¨–ö–ò –î–ê/–ù–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "experience", message.text)
    await FSMAnket.next()
    await message.answer("–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ? üë®‚Äçüîß", reply_markup=types.ReplyKeyboardRemove())


# –ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤–ª–∞–¥–µ–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.message_handler(state=FSMAnket.skills)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "skills", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏? üìÑ", reply_markup=keyboard)


# –ï—Å—Ç—å –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@dp.message_handler(state=FSMAnket.recommendations)  # –ö–ù–û–ü–ê–ß–¨–ö–ò –î–ê/–ù–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "recommendations", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–î–∞", "–ù–µ—Ç"]
    keyboard.add(*buttons)
    await message.answer("–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –í–∞—Å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è –∫–Ω–∏–∂–∫–∞? üìñ", reply_markup=keyboard)


# –ï—Å—Ç—å –ª–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∞—è –∫–Ω–∏–∂–∫–∞
@dp.message_handler(state=FSMAnket.volunteer_book)  # –ö–ù–û–ü–ê–ß–¨–ö–ò –î–ê/–ù–ï–¢!!!!!!!!!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "volunteer_book", message.text)
    await FSMAnket.next()
    await message.answer("–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –í—ã –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º? üåü \n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö", reply_markup=types.ReplyKeyboardRemove())


# –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –í—ã
@dp.message_handler(state=FSMAnket.pitch)
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "pitch", message.text)
    await FSMAnket.next()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
    keyboard.add(*buttons)
    await message.answer(
        "–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —à–∞–Ω—Å–æ–≤ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–±–æ—Ä–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –≤–∏–¥–µ–æ –æ —Å–µ–±–µ, –ª–∏–±–æ —Å—Å—ã–ª–∫—É "
        "–Ω–∞ –Ω–µ–≥–æ üé¨ \n\n–≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥, –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ", reply_markup=keyboard)


# –í–∏–¥–µ–æ –æ —Å–µ–±–µ
@dp.message_handler(state=FSMAnket.video)  # –î–û–ë–ê–í–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ü–†–û–ü–£–°–ö–ê –î–ê–ù–ù–û–ì–û –®–ê–ì–ê!!!!!!!!!!!!!!!!!
async def load_birthday(message: types.Message, state: FSMContext):
    BotDB.add_information(message.from_user.id, "video", message.text)
    await state.reset_state()
    await message.answer("–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∞–Ω–∫–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Åüôå", reply_markup=types.ReplyKeyboardRemove())

#
# # –î–æ–±–∞–≤–∫–∞ –∫ –∞–Ω–∫–µ—Ç–µ
# @dp.message_handler(state=FSMAnket.reviewed)
# async def load_birthday(message: types.Message, state: FSMContext):
#     BotDB.add_information(message.from_user.id, "reviewed", message.text)
#     await FSMAnket.next()
#     await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? üëÄ") #–ö–ù–û–ü–ê–ß–¨–ö–ê –î–ê/–ù–ï–¢ –î–õ–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–†–û–í–ï–†–ö–ò –î–ê–ù–ù–´–•!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
#
