from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import CountVectorizer
import sqlite3


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–ª—É—à–∫–∏
def theGetPatch():
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç, —É –º–µ–Ω—è –ª–∞–ø–∫–∏üêª \n–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –Ω–µ ' \
           '–∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ–≥–æ –∑–∞–¥–∞—Ç—å, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–±—Ä–∞—Ç—å ' \
           '–æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö üìù'


def theTextFilter(text):  # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    text = text.lower()
    text = [c for c in text if c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è- ']
    text = ''.join(text)
    return text


def theGetAnswerByTarget(question):  # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    texts = []  # —Ä–µ–ø–ª–∏–∫–∏
    module = []  # –∏—Ö –∫–ª—é—á–∏

    conn = sqlite3.connect("E:/–Ø–Ω–∞/–ó–∞–≥—Ä—É–∑–∫–∏/Telegram Desktop/questions.sqlite3")
    cur = conn.cursor()
    db = cur.execute("SELECT * from data_config;").fetchall()

    data_config_with_db = {}
    for row in db:
        data_config_with_db[row[0]] = {'examples': row[1].split(';'), 'responses': [row[2]]}

    # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ "—Ä–µ–ø–ª–∏–∫–∏" –∏ "–∫–ª—é—á–∏"
    for intent, intent_data in data_config_with_db.items():
        for example in intent_data['examples']:
            texts.append(example)
            module.append(intent)

    # –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    vectorizer = CountVectorizer()
    vector = vectorizer.fit_transform(texts)

    # –≤—ã–±–æ—Ä
    clf = LogisticRegression().fit(vector, module)
    probas = clf.predict_proba(vectorizer.transform([question]))[0]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É –∏ –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if max(probas) < 0.17:
        return None
    else:
        preResult = clf.predict(vectorizer.transform([question]))[-1]
        return data_config_with_db[preResult]['responses'][-1]


# –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
def theBotMind(question):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
    target = theTextFilter(question)

    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if target:
        answer = theGetAnswerByTarget(target)
        if answer:
            return answer

    # –∑–∞–≥–ª—É—à–∫–∞
    patch = theGetPatch()
    return patch

# # –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
# question = None
#
# while question not in ['exit', '–≤—ã—Ö–æ–¥']:
#     question = input()
#     result = theBotMind(question)
#     print(result)
